
"""
Python script run by EFOC.py through Operator class to take a snapshot of the current set of narrowed down points that pilot could potentially be and
extract each point's GIS data regarding its land classification (e.g. forest, waterway, field) written to landclasses.txt
"""

import numpy as np
from arcpy.management import *
import arcpy.da
import sys
import threading
from ast import literal_eval

""" PointsToLandClasses()
Inputs: list of lat/lon potential pilot coordinates based on drone radar range boundary overlap generated by Operator.GetPoints()
Return: list of corresponding NLCD land class data (ints from 1-100, predefined by dataset) for each point
Uses the ArcGIS Python API for using geoprocessing tools on NLCD raster data
"""
def PointsToLandClasses(pilot_coords):
	#Paths to point feature classes
	points_raw = "C:/summer-games/EFOC/GIS_data/GIS_data.gdb/XY_RAW"
	points_converted = "C:/summer-games/EFOC/GIS_data/GIS_data.gdb/XY_CONVERTED"

	#Make sure feature classes don't already exist
	arcpy.Delete_management(points_raw)
	arcpy.Delete_management(points_converted)

	#Create point feature class to store raw lat/lon data
	arcpy.CreateFeatureclass_management("C:/summer-games/EFOC/GIS_data/GIS_data.gdb", "XY_RAW", "POINT")

	#Add point to point feature class
	with arcpy.da.InsertCursor(points_raw, ["SHAPE@XY"]) as cursor:
		for point in pilot_coords:
			cursor.insertRow([point])
	del cursor

	#Add lat/lon fields to its attribute table
	arcpy.AddGeometryAttributes_management(points_raw, ["POINT_X_Y_Z_M"])

	#Convert coordinates and store in new feature class
	arcpy.ConvertCoordinateNotation_management(points_raw, points_converted, "POINT_X", "POINT_Y", "DD_2", "DD_2")

	#Add NLCD layer data to converted coordinate table
	NLCD_layer = "C:/summer-games/EFOC/GIS_data/NLCD_2016_Land_Cover_L48_20190424.img"
	arcpy.sa.ExtractMultiValuesToPoints(points_converted, [[NLCD_layer, "Land_Class"]])

	#Access layer data in the attribute table
	with arcpy.da.SearchCursor(points_converted, ["Land_Class"]) as cursor:
		coord_classes = []
		for row in cursor:
			coord_classes.append(row[0])

	arcpy.Delete_management(points_raw)
	arcpy.Delete_management(points_converted)

	return coord_classes

#Class handler currently deprecated
class GISHandler():
	def __init__(self, pilot_coords):
		self.first_time = True
		self.coordinates = pilot_coords
		self.classifications = []
		self.land_classes = {}

	def convert_points(self, pilot_coords):
		return PointsToLandClasses(pilot_coords)

	def simplethread(self, coord):
		t = threading.Thread(target=self.singlethreadReduce, args=(coord,))
		t.start()

if __name__ == "__main__":
	#List to store potential pilot coordinates based on drone radar range
	pilot_coords = []

	#Read in file containing these coordinates, append to list
	fp = open("visualization/coords.txt", "r")
	lines = fp.readlines()
	for line in lines:
		pilot_coords.append(literal_eval(line.strip('\n')))
	fp.close()

	#Convert to land class list
	pilot_classes = PointsToLandClasses(pilot_coords)

	#Write land class mapping to a file to process outside the ArcGIS Python environment
	fp = open("visualization/landclasses.txt", "w")
	for land_class in pilot_classes:
		fp.write(str(land_class) + "\n")
	fp.close()

